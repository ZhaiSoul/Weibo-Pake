name: Build App with Cache
on:
  workflow_dispatch:
    inputs:
      version:
        description: "tag version"
        required: true
        default: "V0.0.1"
      is_pre_release:
        description: "pre-release or release, if true, is pre-release"
        required: true
        type: boolean
        default: true


jobs:
  build:
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, windows, macos]
        include:
        - build: linux
          os: ubuntu-20.04
          rust: stable
          target: x86_64-unknown-linux-musl
          # archive-name: target-linux.tar.gz
        - build: windows
          os: windows-latest
          rust: stable-x86_64-msvc
          target: x86_64-pc-windows-msvc
          # archive-name: target-windows.tar.gz
        - build: macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
          # archive-name: target-macos.tar.gz
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: install node
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}

    - name: install dependencies (ubuntu only)
      if: matrix.os == 'ubuntu-20.04'
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev gnome-video-effects gnome-video-effects-extra
        version: 1.1

    - name: rust cache restore
      uses: actions/cache/restore@v3
      id: cache_store
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          src-tauri/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: build for Ubuntu
      if: matrix.os == 'ubuntu-20.04'
      run: |
        npm i
        npm run build:linux
        mkdir output/linux
        cp "src-tauri/target/release/bundle/deb/*.deb" "output/linux/weibo.deb"
        cp "src-tauri/target/release/bundle/appimage/*.AppImage" "output/linux/weibo.AppImage"
        cd output/linux
        ls
  
    - name: build for MacOS
      if: matrix.os == 'macos-latest'
      run: |
        rustup target add aarch64-apple-darwin
        npm i
        npm run build:mac
        mkdir output/macos
        cp "src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg" "output/macos/weibo.dmg"
        cd output/macos
        ls

    - name: build for windows
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        npm i
        npm run build:windows
        mkdir output/windows
        cp "src-tauri/target/x86_64-pc-windows-msvc/release/Weibo.exe" "output/windows/weibo.exe"
        cp "src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/*.msi" "output/windows/weibo-msi.msi"
        cd output/windows
        ls

    - name: rust cache store
      uses: actions/cache/save@v3
      if: steps.cache_store.outputs.cache-hit != 'true'
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          src-tauri/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Upload files
      # arg info: https://github.com/ncipollo/release-action#release-action
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        prerelease: ${{ inputs.is_pre_release }}
        artifacts: "output/*/*.*"
        tag: ${{ inputs.version }}
        token: ${{ secrets.GITHUB_TOKEN }}

    